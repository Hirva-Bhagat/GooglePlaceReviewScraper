# -*- coding: utf-8 -*-
"""Feature Extraction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EHQU55S5HnD2p6BcW91ZFUX9et2vB30W
"""

import pandas as pd
col_list = ["Reviews"]
data = pd.read_csv("/content/drive/My Drive/TWWReviews.csv", usecols=col_list)

data['Reviews']

#Number of Words
data['word_count'] = data['Reviews'].apply(lambda x: len(str(x).split(" ")))
data[['Reviews','word_count']].head()

#Number of characters
data['char_count'] = data['Reviews'].str.len() ## this also includes spaces
data[['Reviews','char_count']].head()

#Average Word Length
#Number of characters(without space count)/Total number of words
def avg_word(sentence):
  words = sentence.split()
  print(words)
  print(len(words))
  print(sum(len(word) for word in words))
  return (sum(len(word) for word in words)/len(words))

data['avg_word'] = data['Reviews'].apply(lambda x: avg_word(x))
data[['Reviews','avg_word']].head()

#Number of stopwords
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop = stopwords.words('english')

data['stopwords'] = data['Reviews'].apply(lambda x: len([x for x in x.split() if x in stop]))
data[['Reviews','stopwords']].head()

#Number of numerics
data['numerics'] = data['Reviews'].apply(lambda x: len([x for x in x.split() if x.isdigit()]))
data[['Reviews','numerics']].head()

#Number of Uppercase words
data['upper'] = data['Reviews'].apply(lambda x: len([x for x in x.split() if x.isupper()]))
data[['Reviews','upper']].head()

pos_family = {
    'noun' : ['NN','NNS','NNP','NNPS'],
    'pron' : ['PRP','PRP$','WP','WP$'],
    'verb' : ['VB','VBD','VBG','VBN','VBP','VBZ'],
    'adj' :  ['JJ','JJR','JJS'],
    'adv' : ['RB','RBR','RBS','WRB']
}

# function to check and get the part of speech tag count of a words in a given sentence
from textblob import TextBlob, Word, Blobber
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
def check_pos_tag(x, flag):
    cnt = 0
    try:
        wiki = TextBlob(x)
        for tup in wiki.tags:
            ppo = list(tup)[1]
            if ppo in pos_family[flag]:
                cnt += 1
                print(ppo, tup)
    except:
        pass
    return cnt

data['noun_count'] = data['Reviews'].apply(lambda x: check_pos_tag(x, 'noun'))
data['verb_count'] = data['Reviews'].apply(lambda x: check_pos_tag(x, 'verb'))
data['adj_count'] = data['Reviews'].apply(lambda x: check_pos_tag(x, 'adj'))
data['adv_count'] = data['Reviews'].apply(lambda x: check_pos_tag(x, 'adv'))
data['pron_count'] = data['Reviews'].apply(lambda x: check_pos_tag(x, 'pron'))
data[['Reviews','noun_count','verb_count','adj_count', 'adv_count', 'pron_count' ]].head()

data.head()

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

cv=CountVectorizer()
A_vec = cv.fit_transform(data["Reviews"])
print(A_vec.toarray())

tv=TfidfVectorizer()
t_vec = tv.fit_transform(data["Reviews"])
print(t_vec.toarray())

feature_names = tv.get_feature_names()

dense = t_vec.todense()
denselist = dense.tolist()
df = pd.DataFrame(denselist, columns=feature_names)

feature_names

df_c =pd.concat([df,data], axis=1)
df_c

def ltoS(s):  
    str1 = ""    
    for e in s:  
        str1 += e   
    
    return str1  
        
B=ltoS(data["Reviews"])
print(B)
BigramsList = [] 

for i in range(len(B.split())-1):
  BigramsList.append((B.split()[i], B.split()[i+1]))
BigramsList